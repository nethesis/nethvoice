#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

"""
This file is created with separation of resposability in mind.
This configures API segment of reports.
"""

import json
import sys
import os

import agent
from jinja2 import Environment, FileSystemLoader

# Create folder scaffolding
os.makedirs('report', exist_ok=True)

# Fetch request
request = json.load(sys.stdin)

# Set environment variables
agent.set_env(
    'REPORTS_INTERNATIONAL_PREFIX',
    request['reports_international_prefix']
)

# Create configuration file
env = Environment(
    loader=FileSystemLoader('../templates/'),
    autoescape=True
)

template = env.get_template('reports-api.j2')
with open('./report/api-config.json', 'w', encoding='utf-8') as file:
    file.write(template.render({
        'reports_api_port': os.environ['REPORTS_API_PORT'],
        'reports_redis_port': os.environ['REPORTS_REDIS_PORT'],
        'nethvoice_mariadb_port': os.environ['NETHVOICE_MARIADB_PORT'],
        'reports_password': os.environ['REPORTS_PASSWORD'],
        'reports_secret': os.environ['REPORTS_SECRET'],
        'reports_api_key': os.environ['REPORTS_API_KEY'],
    }))

# Setup traefik routes
# api endpoint
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'] + '-reports-api',
        'url': 'http://127.0.0.1:' + os.environ["REPORTS_API_PORT"],
        'http2https':  os.environ["TRAEFIK_HTTP2HTTPS"] == "True",
        'lets_encrypt': os.environ["TRAEFIK_LETS_ENCRYPT"] == "True",
        'host': os.environ["NETHVOICE_HOST"],
        'path': '/pbx-report-api',
        'strip_prefix': True
    },
)
agent.assert_exp(response['exit_code'] == 0)

# Enable service and restart
agent.run_helper(
    'systemctl',
    '--user',
    'enable',
    'reports-api.service'
).check_returncode()
agent.run_helper(
    'systemctl',
    '--user',
    'restart',
    'reports-api.service'
).check_returncode()
agent.run_helper(
    'systemctl',
    '--user',
    'enable',
    '--now',
    'reports-scheduler.timer'
).check_returncode()
